package com.huateng.ebank.entity.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.huateng.ebank.entity.orm.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "User".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "User";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Tel = new Property(1, String.class, "tel", false, "TEL");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property IdCardNum = new Property(3, String.class, "idCardNum", false, "ID_CARD_NUM");
        public final static Property Birthday = new Property(4, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Gender = new Property(5, String.class, "gender", false, "GENDER");
        public final static Property Pwd = new Property(6, String.class, "pwd", false, "PWD");
        public final static Property Address = new Property(7, String.class, "address", false, "ADDRESS");
        public final static Property HasAccount = new Property(8, String.class, "hasAccount", false, "HAS_ACCOUNT");
        public final static Property AcctNo = new Property(9, String.class, "acctNo", false, "ACCT_NO");
    }

    private DaoSession daoSession;


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"User\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TEL\" TEXT UNIQUE ," + // 1: tel
                "\"NAME\" TEXT," + // 2: name
                "\"ID_CARD_NUM\" TEXT," + // 3: idCardNum
                "\"BIRTHDAY\" TEXT," + // 4: birthday
                "\"GENDER\" TEXT," + // 5: gender
                "\"PWD\" TEXT," + // 6: pwd
                "\"ADDRESS\" TEXT," + // 7: address
                "\"HAS_ACCOUNT\" TEXT," + // 8: hasAccount
                "\"ACCT_NO\" TEXT);"); // 9: acctNo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"User\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(2, tel);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String idCardNum = entity.getIdCardNum();
        if (idCardNum != null) {
            stmt.bindString(4, idCardNum);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(5, birthday);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(6, gender);
        }
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(7, pwd);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(8, address);
        }
 
        String hasAccount = entity.getHasAccount();
        if (hasAccount != null) {
            stmt.bindString(9, hasAccount);
        }
 
        String acctNo = entity.getAcctNo();
        if (acctNo != null) {
            stmt.bindString(10, acctNo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(2, tel);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String idCardNum = entity.getIdCardNum();
        if (idCardNum != null) {
            stmt.bindString(4, idCardNum);
        }
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(5, birthday);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(6, gender);
        }
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(7, pwd);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(8, address);
        }
 
        String hasAccount = entity.getHasAccount();
        if (hasAccount != null) {
            stmt.bindString(9, hasAccount);
        }
 
        String acctNo = entity.getAcctNo();
        if (acctNo != null) {
            stmt.bindString(10, acctNo);
        }
    }

    @Override
    protected final void attachEntity(User entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tel
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // idCardNum
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // birthday
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // gender
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // pwd
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // address
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // hasAccount
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // acctNo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTel(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIdCardNum(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBirthday(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGender(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPwd(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAddress(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setHasAccount(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setAcctNo(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
